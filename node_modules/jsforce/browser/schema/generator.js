import "core-js/modules/es.error.cause.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.regexp.test.js";
import "core-js/modules/es.regexp.to-string.js";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Set from "@babel/runtime-corejs3/core-js-stable/set";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _endsWithInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/ends-with";
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof _Symbol && _getIteratorMethod(r) || r["@@iterator"]; if (!t) { if (_Array$isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { var _context16; if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = _sliceInstanceProperty(_context16 = {}.toString.call(r)).call(_context16, 8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? _Array$from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.push.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import os from 'os';
import fs from 'node:fs';
import path from 'path';
import { Cli } from '../cli/cli';
import { VERSION } from '..';
import { Command } from 'commander';
function getCacheFileDir() {
  return path.join(os.tmpdir(), 'jsforce-gen-schema-cache');
}
function getCacheFilePath(orgId) {
  return path.join(getCacheFileDir(), orgId, 'describe.json');
}
function readDescribedCache(_x) {
  return _readDescribedCache.apply(this, arguments);
}
function _readDescribedCache() {
  _readDescribedCache = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(orgId) {
    var cacheFile, data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          cacheFile = getCacheFilePath(orgId);
          _context.next = 4;
          return fs.promises.readFile(cacheFile, 'utf8');
        case 4:
          data = _context.sent;
          return _context.abrupt("return", JSON.parse(data));
        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](0);
          return _context.abrupt("return", null);
        case 11:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 8]]);
  }));
  return _readDescribedCache.apply(this, arguments);
}
function loadDescribeResult(_x2, _x3, _x4) {
  return _loadDescribeResult.apply(this, arguments);
}
function _loadDescribeResult() {
  _loadDescribeResult = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(conn, orgId, cache) {
    var _yield$conn$describeG, sos, sobjects, _iterator2, _step2, name, so, cacheFile;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          console.info('describing global');
          _context2.next = 3;
          return conn.describeGlobal();
        case 3:
          _yield$conn$describeG = _context2.sent;
          sos = _yield$conn$describeG.sobjects;
          sobjects = [];
          _iterator2 = _createForOfIteratorHelper(sos);
          _context2.prev = 7;
          _iterator2.s();
        case 9:
          if ((_step2 = _iterator2.n()).done) {
            _context2.next = 18;
            break;
          }
          name = _step2.value.name;
          console.info('describing ' + name);
          _context2.next = 14;
          return conn.describe(name);
        case 14:
          so = _context2.sent;
          sobjects.push(so);
        case 16:
          _context2.next = 9;
          break;
        case 18:
          _context2.next = 23;
          break;
        case 20:
          _context2.prev = 20;
          _context2.t0 = _context2["catch"](7);
          _iterator2.e(_context2.t0);
        case 23:
          _context2.prev = 23;
          _iterator2.f();
          return _context2.finish(23);
        case 26:
          if (!cache) {
            _context2.next = 32;
            break;
          }
          cacheFile = getCacheFilePath(orgId);
          _context2.next = 30;
          return fs.promises.mkdir(path.dirname(cacheFile), {
            recursive: true
          });
        case 30:
          _context2.next = 32;
          return fs.promises.writeFile(cacheFile, _JSON$stringify(sobjects, null, 2), 'utf8');
        case 32:
          return _context2.abrupt("return", sobjects);
        case 33:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[7, 20, 23, 26]]);
  }));
  return _loadDescribeResult.apply(this, arguments);
}
function getParentReferences(sobject) {
  var parentReferences = [];
  var _iterator = _createForOfIteratorHelper(sobject.fields),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _step.value,
        type = _step$value.type,
        nillable = _step$value.nillable,
        relationshipName = _step$value.relationshipName,
        referenceTo = _step$value.referenceTo;
      if (type === 'reference' && relationshipName && referenceTo && referenceTo.length > 0) {
        var parentSObject = referenceTo.length > 1 ? 'Name' : referenceTo[0];
        parentReferences.push({
          nillable: nillable,
          parentSObject: parentSObject,
          relationshipName: relationshipName
        });
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return parentReferences;
}
function getTSTypeString(type) {
  return type === 'double' || type === 'int' || type === 'currency' || type === 'percent' ? 'number' : type === 'boolean' ? 'boolean' : type === 'date' || type === 'datetime' || type === 'time' ? 'DateString' : type === 'base64' ? 'BlobString' : type === 'address' ? 'Address' : type === 'complexvalue' ? 'any' : 'string';
}
function dumpSchema(_x5, _x6, _x7, _x8, _x9, _x10) {
  return _dumpSchema.apply(this, arguments);
}
function _dumpSchema() {
  _dumpSchema = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(conn, orgId, outputFile, schemaName, cache, filterObjects) {
    var sobjects, out;
    return _regeneratorRuntime.wrap(function _callee3$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          if (!cache) {
            _context14.next = 6;
            break;
          }
          _context14.next = 3;
          return readDescribedCache(orgId);
        case 3:
          _context14.t1 = _context14.sent;
          _context14.next = 7;
          break;
        case 6:
          _context14.t1 = null;
        case 7:
          _context14.t0 = _context14.t1;
          if (_context14.t0) {
            _context14.next = 12;
            break;
          }
          _context14.next = 11;
          return loadDescribeResult(conn, orgId, cache);
        case 11:
          _context14.t0 = _context14.sent;
        case 12:
          sobjects = _context14.t0;
          if (fs.existsSync(outputFile)) {
            _context14.next = 18;
            break;
          }
          _context14.next = 16;
          return fs.promises.mkdir(path.dirname(outputFile), {
            recursive: true
          });
        case 16:
          _context14.next = 18;
          return fs.promises.writeFile(outputFile, '', 'utf8');
        case 18:
          out = fs.createWriteStream(outputFile, 'utf8');
          return _context14.abrupt("return", new _Promise(function (resolve, reject) {
            out.on('error', function (err) {
              return reject(err);
            });
            out.on('finish', resolve);
            var writeLine = function writeLine(message) {
              return out.write(message + '\n');
            };
            writeLine("import { Schema, SObjectDefinition, DateString, BlobString, Address } from 'jsforce';");
            writeLine('');
            var _iterator3 = _createForOfIteratorHelper(sobjects),
              _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var _context3, _context4, _context5, _context6, _context7;
                var sobject = _step3.value;
                if (filterObjects && !filterObjects.has(sobject.name)) {
                  continue;
                }
                var name = sobject.name,
                  fields = sobject.fields,
                  childRelationships = sobject.childRelationships;
                writeLine("type Fields$".concat(name, " = {"));
                writeLine('  //');
                var _iterator5 = _createForOfIteratorHelper(fields),
                  _step5;
                try {
                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                    var _context8, _context9;
                    var _step5$value = _step5.value,
                      _name = _step5$value.name,
                      type = _step5$value.type,
                      nillable = _step5$value.nillable;
                    var tsType = getTSTypeString(type);
                    var orNull = nillable ? ' | null' : '';
                    writeLine(_concatInstanceProperty(_context8 = _concatInstanceProperty(_context9 = "  ".concat(_name, ": ")).call(_context9, tsType)).call(_context8, orNull, ";"));
                  }
                } catch (err) {
                  _iterator5.e(err);
                } finally {
                  _iterator5.f();
                }
                writeLine('};');
                writeLine('');
                writeLine("type ParentReferences$".concat(name, " = {"));
                writeLine('  //');
                var parentReferences = getParentReferences(sobject);
                var _iterator6 = _createForOfIteratorHelper(parentReferences),
                  _step6;
                try {
                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                    var _context10, _context11;
                    var _step6$value = _step6.value,
                      _nillable = _step6$value.nillable,
                      parentSObject = _step6$value.parentSObject,
                      relationshipName = _step6$value.relationshipName;
                    if (filterObjects && !filterObjects.has(parentSObject)) {
                      continue;
                    }
                    var _orNull = _nillable ? ' | null' : '';
                    writeLine(_concatInstanceProperty(_context10 = _concatInstanceProperty(_context11 = "  ".concat(relationshipName, ": SObjectDefinition$")).call(_context11, parentSObject)).call(_context10, _orNull, ";"));
                  }
                } catch (err) {
                  _iterator6.e(err);
                } finally {
                  _iterator6.f();
                }
                writeLine('};');
                writeLine('');
                writeLine("type ChildRelationships$".concat(name, " = {"));
                writeLine('  //');
                var _iterator7 = _createForOfIteratorHelper(childRelationships),
                  _step7;
                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var _step7$value = _step7.value,
                      field = _step7$value.field,
                      childSObject = _step7$value.childSObject,
                      _relationshipName = _step7$value.relationshipName;
                    if (filterObjects && !filterObjects.has(childSObject)) {
                      continue;
                    }
                    if (field && childSObject && _relationshipName && !_endsWithInstanceProperty(field).call(field, '__c')) {
                      var _context12;
                      writeLine(_concatInstanceProperty(_context12 = "  ".concat(_relationshipName, ": SObjectDefinition$")).call(_context12, childSObject, ";"));
                    }
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
                writeLine('};');
                writeLine('');
                writeLine(_concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = _concatInstanceProperty(_context6 = _concatInstanceProperty(_context7 = "interface SObjectDefinition$".concat(name, " extends SObjectDefinition<'")).call(_context7, name, "'> {\n    Name: '")).call(_context6, name, "';\n    Fields: Fields$")).call(_context5, name, ";\n    ParentReferences: ParentReferences$")).call(_context4, name, ";\n    ChildRelationships: ChildRelationships$")).call(_context3, name, ";\n  }"));
                writeLine('');
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
            writeLine('');
            writeLine("export interface ".concat(schemaName, " extends Schema {"));
            writeLine('  SObjects: {');
            var _iterator4 = _createForOfIteratorHelper(sobjects),
              _step4;
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var _context13;
                var _name2 = _step4.value.name;
                if (filterObjects && !filterObjects.has(_name2)) {
                  continue;
                }
                writeLine(_concatInstanceProperty(_context13 = "    ".concat(_name2, ": SObjectDefinition$")).call(_context13, _name2, ";"));
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
            writeLine('  };');
            writeLine('}');
            out.end();
          }));
        case 20:
        case "end":
          return _context14.stop();
      }
    }, _callee3);
  }));
  return _dumpSchema.apply(this, arguments);
}
function commaSeparatedList(value, _dummyPrevious) {
  return new _Set(value.split(','));
}

/**
 *
 */
function readCommand() {
  return new Command().option('-u, --username [username]', 'Salesforce username').option('-p, --password [password]', 'Salesforce password (and security token, if available)').option('-c, --connection [connection]', 'Connection name stored in connection registry').option('-l, --loginUrl [loginUrl]', 'Salesforce login url').option('-n, --schemaName [schemaName]', 'Name of schema type', 'MySchema').requiredOption('-o, --outputFile <outputFile>', 'Generated schema file path', './schema.d.ts').option('--sandbox', 'Login to Salesforce sandbox').option('--no-cache', 'Do not generate cache file for described result in tmp directory').option('--clearCache', 'Clear all existing described cache files').option('--filterObjects <filterObjects>', 'Only output schema for specified objects', commaSeparatedList).version(VERSION).parse(process.argv);
}

/**
 *
 */
export default function main() {
  return _main.apply(this, arguments);
}
function _main() {
  _main = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var program, cli, conn;
    return _regeneratorRuntime.wrap(function _callee4$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          program = readCommand();
          cli = new Cli();
          _context15.next = 4;
          return cli.connect(program);
        case 4:
          conn = cli.getCurrentConnection();
          if (conn.userInfo) {
            _context15.next = 8;
            break;
          }
          console.error('Cannot connect to Salesforce');
          return _context15.abrupt("return");
        case 8:
          _context15.next = 10;
          return dumpSchema(conn, conn.userInfo.organizationId, program.outputFile, program.schemaName, program.cache, program.filterObjects);
        case 10:
          if (!program.clearCache) {
            _context15.next = 14;
            break;
          }
          console.log('removing cache files');
          _context15.next = 14;
          return fs.promises.rm(getCacheFileDir(), {
            recursive: true
          });
        case 14:
          console.log("Dumped to: ".concat(program.outputFile));
        case 15:
        case "end":
          return _context15.stop();
      }
    }, _callee4);
  }));
  return _main.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,