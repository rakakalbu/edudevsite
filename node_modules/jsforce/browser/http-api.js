import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _wrapNativeSuper from "@babel/runtime-corejs3/helpers/wrapNativeSuper";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _globalThis from "@babel/runtime-corejs3/core-js/global-this";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? _Reflect$construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
import "core-js/modules/es.error.cause.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.push.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.keys.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.regexp.test.js";
import "core-js/modules/web.self.js";
/**
 *
 */
import { EventEmitter } from 'events';
import xml2js from 'xml2js';
import { getLogger } from './util/logger';
import { StreamPromise } from './util/promise';
import { parseCSV } from './csv';
import { createLazyStream } from './util/stream';
import { getBodySize } from './util/get-body-size';

/** @private */
function parseJSON(str) {
  return JSON.parse(str);
}

/** @private */
function parseXML(_x) {
  return _parseXML.apply(this, arguments);
}
/** @private */
function _parseXML() {
  _parseXML = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(str) {
    return _regeneratorRuntime.wrap(function _callee5$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          return _context11.abrupt("return", xml2js.parseStringPromise(str, {
            explicitArray: false
          }));
        case 1:
        case "end":
          return _context11.stop();
      }
    }, _callee5);
  }));
  return _parseXML.apply(this, arguments);
}
function parseText(str) {
  return str;
}

/**
 * HTTP based API class with authorization hook
 */
export var HttpApi = /*#__PURE__*/function (_EventEmitter) {
  function HttpApi(conn, options) {
    var _this;
    _classCallCheck(this, HttpApi);
    _this = _callSuper(this, HttpApi);
    _this._conn = conn;
    _this._logger = conn._logLevel ? HttpApi._logger.createInstance(conn._logLevel) : HttpApi._logger;
    _this._responseType = options.responseType;
    _this._transport = options.transport || conn._transport;
    _this._noContentResponse = options.noContentResponse;
    _this._options = options;
    return _this;
  }

  /**
   * Callout to API endpoint using http
   */
  _inherits(HttpApi, _EventEmitter);
  return _createClass(HttpApi, [{
    key: "request",
    value: function request(_request) {
      var _this2 = this;
      return StreamPromise.create(function () {
        var _createLazyStream = createLazyStream(),
          stream = _createLazyStream.stream,
          setStream = _createLazyStream.setStream;
        var promise = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _context, _context2;
          var refreshDelegate, bodyPromise, _body2, requestTime, requestPromise, response, responseTime, err, body;
          return _regeneratorRuntime.wrap(function _callee$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                refreshDelegate = _this2.getRefreshDelegate();
                /* TODO decide remove or not this section */
                /*
                // remember previous instance url in case it changes after a refresh
                const lastInstanceUrl = conn.instanceUrl;
                 // check to see if the token refresh has changed the instance url
                if(lastInstanceUrl !== conn.instanceUrl){
                  // if the instance url has changed
                  // then replace the current request urls instance url fragment
                  // with the updated instance url
                  request.url = request.url.replace(lastInstanceUrl,conn.instanceUrl);
                }
                */
                if (!(refreshDelegate && refreshDelegate.isRefreshing())) {
                  _context3.next = 10;
                  break;
                }
                _context3.next = 4;
                return refreshDelegate.waitRefresh();
              case 4:
                bodyPromise = _this2.request(_request);
                setStream(bodyPromise.stream());
                _context3.next = 8;
                return bodyPromise;
              case 8:
                _body2 = _context3.sent;
                return _context3.abrupt("return", _body2);
              case 10:
                // hook before sending
                _this2.beforeSend(_request);
                _this2.emit('request', _request);
                _this2._logger.debug(_concatInstanceProperty(_context = "<request> method=".concat(_request.method, ", url=")).call(_context, _request.url));
                requestTime = _Date$now();
                requestPromise = _this2._transport.httpRequest(_request, _this2._options);
                setStream(requestPromise.stream());
                _context3.prev = 16;
                _context3.next = 19;
                return requestPromise;
              case 19:
                response = _context3.sent;
                _context3.next = 26;
                break;
              case 22:
                _context3.prev = 22;
                _context3.t0 = _context3["catch"](16);
                _this2._logger.error(_context3.t0);
                throw _context3.t0;
              case 26:
                _context3.prev = 26;
                responseTime = _Date$now();
                _this2._logger.debug("elapsed time: ".concat(responseTime - requestTime, " msec"));
                return _context3.finish(26);
              case 30:
                if (response) {
                  _context3.next = 32;
                  break;
                }
                return _context3.abrupt("return");
              case 32:
                _this2._logger.debug(_concatInstanceProperty(_context2 = "<response> status=".concat(String(response.statusCode), ", url=")).call(_context2, _request.url));
                _this2.emit('response', response);
                // Refresh token if session has been expired and requires authentication
                // when session refresh delegate is available
                if (!(_this2.isSessionExpired(response) && refreshDelegate)) {
                  _context3.next = 39;
                  break;
                }
                _context3.next = 37;
                return refreshDelegate.refresh(requestTime);
              case 37:
                /* remove the `content-length` header after token refresh
                 *
                 * SOAP requests include the access token their the body,
                 * if the first req had an invalid token and jsforce successfully
                 * refreshed it we need to remove the `content-length` header
                 * so that it get's re-calculated again with the new body.
                 *
                 * REST request aren't affected by this because the access token
                 * is sent via HTTP headers
                 *
                 * `_message` is only present in SOAP requests
                 */
                if ('_message' in _request && _request.headers && 'content-length' in _request.headers) {
                  delete _request.headers['content-length'];
                }
                return _context3.abrupt("return", _this2.request(_request));
              case 39:
                if (!_this2.isErrorResponse(response)) {
                  _context3.next = 44;
                  break;
                }
                _context3.next = 42;
                return _this2.getError(response);
              case 42:
                err = _context3.sent;
                throw err;
              case 44:
                _context3.next = 46;
                return _this2.getResponseBody(response);
              case 46:
                body = _context3.sent;
                return _context3.abrupt("return", body);
              case 48:
              case "end":
                return _context3.stop();
            }
          }, _callee, null, [[16, 22, 26, 30]]);
        }))();
        return {
          stream: stream,
          promise: promise
        };
      });
    }

    /**
     * @protected
     */
  }, {
    key: "getRefreshDelegate",
    value: function getRefreshDelegate() {
      return this._conn._refreshDelegate;
    }

    /**
     * @protected
     */
  }, {
    key: "beforeSend",
    value: function beforeSend(request) {
      var _context5;
      /* eslint-disable no-param-reassign */
      var headers = request.headers || {};
      if (this._conn.accessToken) {
        headers.Authorization = "Bearer ".concat(this._conn.accessToken);
      }
      if (this._conn._callOptions) {
        var callOptions = [];
        for (var _i = 0, _Object$keys = _Object$keys2(this._conn._callOptions); _i < _Object$keys.length; _i++) {
          var _context4;
          var name = _Object$keys[_i];
          callOptions.push(_concatInstanceProperty(_context4 = "".concat(name, "=")).call(_context4, this._conn._callOptions[name]));
        }
        headers['Sforce-Call-Options'] = callOptions.join(', ');
      }
      var bodySize = getBodySize(request.body, headers);
      var cannotHaveBody = _includesInstanceProperty(_context5 = ['GET', 'HEAD', 'OPTIONS']).call(_context5, request.method);

      // Don't set content-length in browsers as it's not allowed
      var isBrowser = 'window' in _globalThis || 'self' in _globalThis;
      if (!isBrowser &&
      // Don't set content-length in browsers as it's not allowed
      !cannotHaveBody && !!request.body && !('transfer-encoding' in headers) && !('content-length' in headers) && !!bodySize) {
        this._logger.debug("missing 'content-length' header, setting it to: ".concat(bodySize));
        headers['content-length'] = String(bodySize);
      }
      request.headers = headers;
    }

    /**
     * Detect response content mime-type
     * @protected
     */
  }, {
    key: "getResponseContentType",
    value: function getResponseContentType(response) {
      return this._responseType || response.headers && response.headers['content-type'];
    }

    /**
     * @private
     */
    // eslint-disable-next-line @typescript-eslint/require-await
  }, {
    key: "parseResponseBody",
    value: (function () {
      var _parseResponseBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {
        var contentType, parseBody, _context6;
        return _regeneratorRuntime.wrap(function _callee2$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              contentType = this.getResponseContentType(response) || '';
              parseBody = /^(text|application)\/xml(;|$)/.test(contentType) ? parseXML : /^application\/json(;|$)/.test(contentType) ? parseJSON : /^text\/csv(;|$)/.test(contentType) ? parseCSV : parseText;
              _context7.prev = 2;
              return _context7.abrupt("return", parseBody(response.body));
            case 6:
              _context7.prev = 6;
              _context7.t0 = _context7["catch"](2);
              // TODO(next major): we could throw a new "invalid response body" error instead.
              this._logger.debug(_concatInstanceProperty(_context6 = "Failed to parse body of content-type: ".concat(contentType, ". Error: ")).call(_context6, _context7.t0.message));
              return _context7.abrupt("return", response.body);
            case 10:
            case "end":
              return _context7.stop();
          }
        }, _callee2, this, [[2, 6]]);
      }));
      function parseResponseBody(_x2) {
        return _parseResponseBody.apply(this, arguments);
      }
      return parseResponseBody;
    }()
    /**
     * Get response body
     * @protected
     */
    )
  }, {
    key: "getResponseBody",
    value: (function () {
      var _getResponseBody = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {
        var body, err;
        return _regeneratorRuntime.wrap(function _callee3$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (!(response.statusCode === 204)) {
                _context8.next = 2;
                break;
              }
              return _context8.abrupt("return", this._noContentResponse);
            case 2:
              _context8.next = 4;
              return this.parseResponseBody(response);
            case 4:
              body = _context8.sent;
              if (!this.hasErrorInResponseBody(body)) {
                _context8.next = 10;
                break;
              }
              _context8.next = 8;
              return this.getError(response, body);
            case 8:
              err = _context8.sent;
              throw err;
            case 10:
              if (!(response.statusCode === 300)) {
                _context8.next = 12;
                break;
              }
              throw new HttpApiError('Multiple records found', 'MULTIPLE_CHOICES', body);
            case 12:
              return _context8.abrupt("return", body);
            case 13:
            case "end":
              return _context8.stop();
          }
        }, _callee3, this);
      }));
      function getResponseBody(_x3) {
        return _getResponseBody.apply(this, arguments);
      }
      return getResponseBody;
    }()
    /**
     * Detect session expiry
     * @protected
     */
    )
  }, {
    key: "isSessionExpired",
    value: function isSessionExpired(response) {
      var _context9;
      // TODO:
      // The connected app msg only applies to Agent API requests, we should move this to a separate SFAP/Agent API class later.
      return response.statusCode === 401 && !_includesInstanceProperty(_context9 = response.body).call(_context9, 'Connected app is not attached to Agent');
    }

    /**
     * Detect error response
     * @protected
     */
  }, {
    key: "isErrorResponse",
    value: function isErrorResponse(response) {
      return response.statusCode >= 400;
    }

    /**
     * Detect error in response body
     * @protected
     */
  }, {
    key: "hasErrorInResponseBody",
    value: function hasErrorInResponseBody(_body) {
      return false;
    }

    /**
     * Parsing error message in response
     * @protected
     */
  }, {
    key: "parseError",
    value: function parseError(body) {
      var errors = body;

      // XML response
      if (errors.Errors) {
        return errors.Errors.Error;
      }
      return errors;
    }

    /**
     * Get error message in response
     * @protected
     */
  }, {
    key: "getError",
    value: (function () {
      var _getError = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response, body) {
        var error;
        return _regeneratorRuntime.wrap(function _callee4$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.prev = 0;
              _context10.t0 = this;
              _context10.t1 = body;
              if (_context10.t1) {
                _context10.next = 7;
                break;
              }
              _context10.next = 6;
              return this.parseResponseBody(response);
            case 6:
              _context10.t1 = _context10.sent;
            case 7:
              _context10.t2 = _context10.t1;
              error = _context10.t0.parseError.call(_context10.t0, _context10.t2);
              _context10.next = 13;
              break;
            case 11:
              _context10.prev = 11;
              _context10.t3 = _context10["catch"](0);
            case 13:
              if (!_Array$isArray(error)) {
                _context10.next = 19;
                break;
              }
              if (!(error.length === 1)) {
                _context10.next = 18;
                break;
              }
              error = error[0];
              _context10.next = 19;
              break;
            case 18:
              return _context10.abrupt("return", new HttpApiError("Multiple errors returned.\n  Check `error.data` for the error details", 'MULTIPLE_API_ERRORS', error));
            case 19:
              error = _typeof(error) === 'object' && error !== null && typeof error.message === 'string' ? error : {
                errorCode: "ERROR_HTTP_".concat(response.statusCode),
                message: response.body
              };
              if (!(response.headers['content-type'] === 'text/html')) {
                _context10.next = 23;
                break;
              }
              this._logger.debug("html response.body: ".concat(response.body));
              return _context10.abrupt("return", new HttpApiError("HTTP response contains html content.\nCheck that the org exists and can be reached.\nSee `error.data` for the full html response.", error.errorCode, error.message));
            case 23:
              return _context10.abrupt("return", error instanceof HttpApiError ? error : new HttpApiError(error.message, error.errorCode, error));
            case 24:
            case "end":
              return _context10.stop();
          }
        }, _callee4, this, [[0, 11]]);
      }));
      function getError(_x4, _x5) {
        return _getError.apply(this, arguments);
      }
      return getError;
    }())
  }]);
}(EventEmitter);

/**
 *
 */
_defineProperty(HttpApi, "_logger", getLogger('http-api'));
var HttpApiError = /*#__PURE__*/function (_Error) {
  /**
   * This contains error-specific details, usually returned from the API.
   */

  function HttpApiError(message, errorCode, data) {
    var _this3;
    _classCallCheck(this, HttpApiError);
    _this3 = _callSuper(this, HttpApiError, [message]);
    _this3.name = errorCode || _this3.name;
    _this3.errorCode = _this3.name;
    _this3.data = data;
    return _this3;
  }

  /**
   * This will be removed in the next major (v4)
   *
   * @deprecated use `error.data` instead
   */
  _inherits(HttpApiError, _Error);
  return _createClass(HttpApiError, [{
    key: "content",
    get: function get() {
      return this.data;
    }
  }]);
}(/*#__PURE__*/_wrapNativeSuper(Error));
export default HttpApi;
export var isBrowser = 'window' in _globalThis || 'self' in _globalThis;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,